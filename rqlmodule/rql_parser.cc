/******************************************************************
 * File: rql_parser.cc
 *
 * This file was automatically generated by CppCC Version 0.0.8
 * DO NOT EDIT MANUALLY
 ******************************************************************/



#include "rql_parser.hh"


#line 155 "rql.cg"
StmtNode* cppcc::
#line 16 "rql_parser.cc"
RqlParser::Goal (
#line 155 "rql.cg"
 TypeDict* types )
#line 20 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 157 "rql.cg"
 
		DeleteStmt *tmp1=0;
		InsertStmt *tmp2=0;
		UpdateStmt *tmp3=0;
		SelectStmt *tmp4=0;
		StmtNode   *tmp=0;
		std::streampos startpos = scanner.getStreamPos();

		
	    ;
#line 35 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::DELETE)) {
    consumeToken(RqlToken::DELETE);
    {
#line 167 "rql.cg"
 tmp1 = new DeleteStmt( types ); }
#line 42 "rql_parser.cc"

    Delete(
#line 167 "rql.cg"
 tmp1 );
#line 47 "rql_parser.cc"

    consumeToken(RqlToken::SEMICOLON);
    {
#line 167 "rql.cg"
 tmp = tmp1; }
#line 53 "rql_parser.cc"

  } else { 
    if ((scanner.la()->id == RqlToken::INSERT)) {
      {
#line 168 "rql.cg"
 tmp2 = new InsertStmt( types ); }
#line 60 "rql_parser.cc"

      consumeToken(RqlToken::INSERT);
      Insert(
#line 168 "rql.cg"
 tmp2 );
#line 66 "rql_parser.cc"

      consumeToken(RqlToken::SEMICOLON);
      {
#line 168 "rql.cg"
 tmp = tmp2; }
#line 72 "rql_parser.cc"

    } else { 
      if ((scanner.la()->id == RqlToken::SET)) {
        {
#line 169 "rql.cg"
 tmp3 = new UpdateStmt( types ); }
#line 79 "rql_parser.cc"

        consumeToken(RqlToken::SET);
        Update(
#line 169 "rql.cg"
 tmp3 );
#line 85 "rql_parser.cc"

        consumeToken(RqlToken::SEMICOLON);
        {
#line 169 "rql.cg"
 tmp = tmp3; }
#line 91 "rql_parser.cc"

      } else { 
        {
#line 170 "rql.cg"
 tmp4 = new SelectStmt( types ); }
#line 97 "rql_parser.cc"

        Select(
#line 170 "rql.cg"
 tmp4 );
#line 102 "rql_parser.cc"

        consumeToken(RqlToken::SEMICOLON);
        {
#line 170 "rql.cg"
 tmp = tmp4; }
#line 108 "rql_parser.cc"

      }
    }
  }
  {
#line 172 "rql.cg"

		    tmp->stmt_start = startpos;
		    tmp->stmt_end = scanner.getStreamPos();
		    return tmp;
		}
#line 120 "rql_parser.cc"

}



#line 180 "rql.cg"
RQLNode* cppcc::
#line 128 "rql_parser.cc"
RqlParser::Delete (
#line 180 "rql.cg"
 DeleteStmt* parent )
#line 132 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  if ((
#line 181 "rql.cg"
scanner.is_next_vars_decl())
#line 139 "rql_parser.cc"
) {
    Vars_Decl(
#line 181 "rql.cg"
parent);
#line 144 "rql_parser.cc"

    if ((scanner.la()->id == RqlToken::WHERE)) {
      Restr(
#line 181 "rql.cg"
parent);
#line 150 "rql_parser.cc"

    } else { 
       /* lambda */
    }
  } else { 
    Rels_Decl(
#line 182 "rql.cg"
parent);
#line 159 "rql_parser.cc"

    if ((scanner.la()->id == RqlToken::WHERE)) {
      Restr(
#line 182 "rql.cg"
parent);
#line 165 "rql_parser.cc"

    } else { 
       /* lambda */
    }
  }
  {
#line 184 "rql.cg"
 return parent; }
#line 174 "rql_parser.cc"

}



#line 189 "rql.cg"
RQLNode* cppcc::
#line 182 "rql_parser.cc"
RqlParser::Insert (
#line 189 "rql.cg"
 InsertStmt* parent )
#line 186 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  Vars_Decl(
#line 190 "rql.cg"
parent);
#line 193 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::COLON)) {
    Insert_Rels(
#line 190 "rql.cg"
parent);
#line 199 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  {
#line 191 "rql.cg"
 return parent; }
#line 207 "rql_parser.cc"

}



#line 194 "rql.cg"
RQLNode* cppcc::
#line 215 "rql_parser.cc"
RqlParser::Insert_Rels (
#line 194 "rql.cg"
 InsertStmt* parent )
#line 219 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  consumeToken(RqlToken::COLON);
  Rels_Decl(
#line 195 "rql.cg"
parent);
#line 227 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::WHERE)) {
    Restr(
#line 195 "rql.cg"
parent);
#line 233 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  {
#line 196 "rql.cg"
 return parent; }
#line 241 "rql_parser.cc"

}



#line 201 "rql.cg"
RQLNode* cppcc::
#line 249 "rql_parser.cc"
RqlParser::Update (
#line 201 "rql.cg"
 UpdateStmt* parent )
#line 253 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  Rels_Decl(
#line 202 "rql.cg"
parent);
#line 260 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::WHERE)) {
    Restr(
#line 202 "rql.cg"
parent);
#line 266 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  {
#line 203 "rql.cg"
 return parent; }
#line 274 "rql_parser.cc"

}



#line 207 "rql.cg"
RQLNode* cppcc::
#line 282 "rql_parser.cc"
RqlParser::Select (
#line 207 "rql.cg"
 SelectStmt* parent )
#line 286 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == RqlToken::DISTINCT)) {
    consumeToken(RqlToken::DISTINCT);
    {
#line 208 "rql.cg"
 parent->distinct = true; }
#line 295 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  Select_Base(
#line 208 "rql.cg"
parent);
#line 303 "rql_parser.cc"

  {
#line 209 "rql.cg"
 return parent; }
#line 308 "rql_parser.cc"

}



#line 212 "rql.cg"
RQLNode* cppcc::
#line 316 "rql_parser.cc"
RqlParser::Select_Base (
#line 212 "rql.cg"
 SelectStmt* parent )
#line 320 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 213 "rql.cg"
 std::string etype; ;
#line 326 "rql_parser.cc"

  
#line 214 "rql.cg"
etype = 
#line 331 "rql_parser.cc"
E_Type();
  Selected_Terms(
#line 215 "rql.cg"
 parent );
#line 336 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::WHERE)) {
    Restr(
#line 215 "rql.cg"
 parent );
#line 342 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  if ((scanner.la()->id == RqlToken::GROUPBY)) {
    Group(
#line 216 "rql.cg"
 parent );
#line 351 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  if ((scanner.la()->id == RqlToken::ORDERBY)) {
    Sort(
#line 217 "rql.cg"
 parent );
#line 360 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  if ((scanner.la()->id == RqlToken::LIMIT) || (scanner.la()->id == RqlToken::OFFSET)) {
    Limit_Offset(
#line 218 "rql.cg"
 parent );
#line 369 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  {
#line 219 "rql.cg"
 parent->set_statement_type( etype ); return parent; }
#line 377 "rql_parser.cc"

}



#line 222 "rql.cg"
RQLNode* cppcc::
#line 385 "rql_parser.cc"
RqlParser::Selected_Terms (
#line 222 "rql.cg"
 SelectStmt* parent )
#line 389 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 223 "rql.cg"
 RQLNode* added_expr=0; ;
#line 395 "rql_parser.cc"

  
#line 224 "rql.cg"
added_expr = 
#line 400 "rql_parser.cc"
Added_Expr(
#line 224 "rql.cg"
 parent );
#line 404 "rql_parser.cc"

  {
#line 224 "rql.cg"
 parent->append_selected( added_expr ); }
#line 409 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::COMA)) {
    consumeToken(RqlToken::COMA);
    
#line 225 "rql.cg"
added_expr = 
#line 416 "rql_parser.cc"
Added_Expr(
#line 225 "rql.cg"
 parent );
#line 420 "rql_parser.cc"

    {
#line 225 "rql.cg"
 parent->append_selected( added_expr ); }
#line 425 "rql_parser.cc"

  }
  {
#line 226 "rql.cg"
 return parent; }
#line 431 "rql_parser.cc"

}



#line 231 "rql.cg"
RQLNode* cppcc::
#line 439 "rql_parser.cc"
RqlParser::Group (
#line 231 "rql.cg"
 StmtNode* parent )
#line 443 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 232 "rql.cg"

	    GroupNode *group = new GroupNode();
	    VarNode *v=0;
	;
#line 452 "rql_parser.cc"

  consumeToken(RqlToken::GROUPBY);
  
#line 236 "rql.cg"
v = 
#line 458 "rql_parser.cc"
Var(
#line 236 "rql.cg"
 parent );
#line 462 "rql_parser.cc"

  {
#line 236 "rql.cg"
 group->append( v ); }
#line 467 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::COMA)) {
    consumeToken(RqlToken::COMA);
    
#line 237 "rql.cg"
v = 
#line 474 "rql_parser.cc"
Var(
#line 237 "rql.cg"
 parent );
#line 478 "rql_parser.cc"

    {
#line 237 "rql.cg"
 group->append( v ); }
#line 483 "rql_parser.cc"

  }
  {
#line 238 "rql.cg"
 parent->append( group ); return parent; }
#line 489 "rql_parser.cc"

}



#line 241 "rql.cg"
RQLNode* cppcc::
#line 497 "rql_parser.cc"
RqlParser::Sort (
#line 241 "rql.cg"
 StmtNode* parent )
#line 501 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 242 "rql.cg"

	    SortNode *sort = new SortNode();
	    SortTermNode* term=0;
	;
#line 510 "rql_parser.cc"

  consumeToken(RqlToken::ORDERBY);
  
#line 246 "rql.cg"
term = 
#line 516 "rql_parser.cc"
Sort_Term(
#line 246 "rql.cg"
 parent );
#line 520 "rql_parser.cc"

  {
#line 246 "rql.cg"
 sort->append( term ); }
#line 525 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::COMA)) {
    consumeToken(RqlToken::COMA);
    
#line 247 "rql.cg"
term = 
#line 532 "rql_parser.cc"
Sort_Term(
#line 247 "rql.cg"
 parent );
#line 536 "rql_parser.cc"

    {
#line 247 "rql.cg"
 sort->append( term ); }
#line 541 "rql_parser.cc"

  }
  {
#line 248 "rql.cg"
 parent->append( sort ); return parent; }
#line 547 "rql_parser.cc"

}



#line 251 "rql.cg"
SortTermNode* cppcc::
#line 555 "rql_parser.cc"
RqlParser::Sort_Term (
#line 251 "rql.cg"
 StmtNode* parent )
#line 559 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 252 "rql.cg"
 ExprNode* added_expr=0; bool ordering = true ;
#line 565 "rql_parser.cc"

  
#line 253 "rql.cg"
added_expr = 
#line 570 "rql_parser.cc"
Added_Expr(
#line 253 "rql.cg"
 parent );
#line 574 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::SORT_ASC) || (scanner.la()->id == RqlToken::SORT_DESC)) {
    if ((scanner.la()->id == RqlToken::SORT_DESC)) {
      consumeToken(RqlToken::SORT_DESC);
      {
#line 254 "rql.cg"
 ordering = false; }
#line 582 "rql_parser.cc"

    } else { 
      consumeToken(RqlToken::SORT_ASC);
      {
#line 255 "rql.cg"
 ordering = true; }
#line 589 "rql_parser.cc"

    }
  } else { 
     /* lambda */
  }
  {
#line 256 "rql.cg"
 return new SortTermNode( added_expr, ordering ); }
#line 598 "rql_parser.cc"

}



#line 261 "rql.cg"
RQLNode* cppcc::
#line 606 "rql_parser.cc"
RqlParser::Limit_Offset (
#line 261 "rql.cg"
 SelectStmt* parent )
#line 610 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == RqlToken::LIMIT)) {
    Limit(
#line 262 "rql.cg"
 parent );
#line 618 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  if ((scanner.la()->id == RqlToken::OFFSET)) {
    Offset(
#line 262 "rql.cg"
 parent );
#line 627 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  {
#line 262 "rql.cg"
 return parent; }
#line 635 "rql_parser.cc"

}


void cppcc::RqlParser::Limit (
#line 265 "rql.cg"
 SelectStmt* parent )
#line 643 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  consumeToken(RqlToken::LIMIT);
  consumeToken(RqlToken::INT);
  {
#line 266 "rql.cg"
 parent->set_limit( int(*token) ); }
#line 652 "rql_parser.cc"

}


void cppcc::RqlParser::Offset (
#line 268 "rql.cg"
 SelectStmt* parent )
#line 660 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  consumeToken(RqlToken::OFFSET);
  consumeToken(RqlToken::INT);
  {
#line 269 "rql.cg"
 parent->set_offset( int(*token) ); }
#line 669 "rql_parser.cc"

}



#line 274 "rql.cg"
RQLNode* cppcc::
#line 677 "rql_parser.cc"
RqlParser::Restr (
#line 274 "rql.cg"
 StmtNode* parent )
#line 681 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 275 "rql.cg"
 RelNode* rels=0; ;
#line 687 "rql_parser.cc"

  consumeToken(RqlToken::WHERE);
  
#line 276 "rql.cg"
rels = 
#line 693 "rql_parser.cc"
Rels(
#line 276 "rql.cg"
 parent );
#line 697 "rql_parser.cc"

  {
#line 276 "rql.cg"
 parent->append( rels ); return parent; }
#line 702 "rql_parser.cc"

}



#line 279 "rql.cg"
RelNode* cppcc::
#line 710 "rql_parser.cc"
RqlParser::Rels (
#line 279 "rql.cg"
 StmtNode* parent )
#line 714 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 280 "rql.cg"
 RelNode *lrel=0, *rrel=0; ;
#line 720 "rql_parser.cc"

  
#line 281 "rql.cg"
lrel = 
#line 725 "rql_parser.cc"
Ored_Rels(
#line 281 "rql.cg"
 parent );
#line 729 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::COMA)) {
    consumeToken(RqlToken::COMA);
    
#line 282 "rql.cg"
rrel = 
#line 736 "rql_parser.cc"
Ored_Rels(
#line 282 "rql.cg"
 parent );
#line 740 "rql_parser.cc"

    {
#line 283 "rql.cg"
 lrel = new AndNode( lrel, rrel ); }
#line 745 "rql_parser.cc"

  }
  {
#line 284 "rql.cg"
 return lrel; }
#line 751 "rql_parser.cc"

}



#line 287 "rql.cg"
RelNode* cppcc::
#line 759 "rql_parser.cc"
RqlParser::Ored_Rels (
#line 287 "rql.cg"
 StmtNode* parent )
#line 763 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 288 "rql.cg"
 RelNode *lrel=0, *rrel=0; ;
#line 769 "rql_parser.cc"

  
#line 289 "rql.cg"
lrel = 
#line 774 "rql_parser.cc"
Anded_Rels(
#line 289 "rql.cg"
 parent );
#line 778 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::OR)) {
    consumeToken(RqlToken::OR);
    
#line 290 "rql.cg"
rrel = 
#line 785 "rql_parser.cc"
Anded_Rels(
#line 290 "rql.cg"
 parent );
#line 789 "rql_parser.cc"

    {
#line 291 "rql.cg"
 lrel = new OrNode( lrel, rrel ); }
#line 794 "rql_parser.cc"

  }
  {
#line 292 "rql.cg"
 return lrel; }
#line 800 "rql_parser.cc"

}



#line 295 "rql.cg"
RelNode* cppcc::
#line 808 "rql_parser.cc"
RqlParser::Anded_Rels (
#line 295 "rql.cg"
 StmtNode* parent )
#line 812 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 296 "rql.cg"
 RelNode *lrel=0, *rrel=0; ;
#line 818 "rql_parser.cc"

  
#line 297 "rql.cg"
lrel = 
#line 823 "rql_parser.cc"
Rel(
#line 297 "rql.cg"
 parent );
#line 827 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::AND)) {
    consumeToken(RqlToken::AND);
    
#line 298 "rql.cg"
rrel = 
#line 834 "rql_parser.cc"
Rel(
#line 298 "rql.cg"
 parent );
#line 838 "rql_parser.cc"

    {
#line 299 "rql.cg"
 lrel = new AndNode( lrel, rrel ); }
#line 843 "rql_parser.cc"

  }
  {
#line 300 "rql.cg"
 return lrel; }
#line 849 "rql_parser.cc"

}



#line 303 "rql.cg"
RelNode* cppcc::
#line 857 "rql_parser.cc"
RqlParser::Rel (
#line 303 "rql.cg"
 StmtNode* parent )
#line 861 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 304 "rql.cg"

	    bool negated = false;
	    RelNode *rel=0;
	;
#line 870 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::NOT) || (scanner.la()->id == RqlToken::SYMBOL)) {
    if ((scanner.la()->id == RqlToken::NOT)) {
      consumeToken(RqlToken::NOT);
      {
#line 308 "rql.cg"
 negated = true; }
#line 878 "rql_parser.cc"

    } else { 
       /* lambda */
    }
    
#line 309 "rql.cg"
rel = 
#line 886 "rql_parser.cc"
Base_Rel(
#line 309 "rql.cg"
 parent );
#line 890 "rql_parser.cc"

    {
#line 309 "rql.cg"
 rel->_not = negated;}
#line 895 "rql_parser.cc"

  } else { 
    consumeToken(RqlToken::LPAREN);
    
#line 310 "rql.cg"
rel = 
#line 902 "rql_parser.cc"
Rels(
#line 310 "rql.cg"
parent);
#line 906 "rql_parser.cc"

    consumeToken(RqlToken::RPAREN);
  }
  {
#line 311 "rql.cg"
 return rel; }
#line 913 "rql_parser.cc"

}



#line 314 "rql.cg"
RelationNode* cppcc::
#line 921 "rql_parser.cc"
RqlParser::Base_Rel (
#line 314 "rql.cg"
 StmtNode* parent )
#line 925 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 315 "rql.cg"

	    RelationNode *e=0;
	    VarNode *var=0;
	    std::string rtype;
	    ExprNode *expr=0;
	;
#line 936 "rql_parser.cc"

  
#line 321 "rql.cg"
var = 
#line 941 "rql_parser.cc"
Var(
#line 321 "rql.cg"
parent);
#line 945 "rql_parser.cc"

  
#line 322 "rql.cg"
rtype = 
#line 950 "rql_parser.cc"
R_Type();
  
#line 323 "rql.cg"
expr = 
#line 955 "rql_parser.cc"
Expr(
#line 323 "rql.cg"
parent);
#line 959 "rql_parser.cc"

  {
#line 324 "rql.cg"

		e = new RelationNode( rtype );
		e->append(var);
		assert(expr);
		e->append(expr);
		return e;
	    }
#line 970 "rql_parser.cc"

}



#line 334 "rql.cg"
std::string cppcc::
#line 978 "rql_parser.cc"
RqlParser::R_Type ()
     throw (ScanException, ParseException)
{
  consumeToken(RqlToken::SYMBOL);
  {
#line 335 "rql.cg"

	    if (is_r_type( token->image() ))
		return token->image();
	    else
		throw ScanException( token->bPos, "Expected R_Type"); 
	}
#line 991 "rql_parser.cc"

}



#line 342 "rql.cg"
std::string cppcc::
#line 999 "rql_parser.cc"
RqlParser::E_Type ()
     throw (ScanException, ParseException)
{
  consumeToken(RqlToken::SYMBOL);
  {
#line 343 "rql.cg"

	    if (is_e_type( token->image() ))
		return token->image();
	    else
		throw ScanException( token->bPos, "Expected E_Type"); 
	}
#line 1012 "rql_parser.cc"

}



#line 353 "rql.cg"
RQLNode* cppcc::
#line 1020 "rql_parser.cc"
RqlParser::Vars_Decl (
#line 353 "rql.cg"
 StmtNode* parent )
#line 1024 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 354 "rql.cg"

	    VarNode *v=0;
	    std::string etype;
	;
#line 1033 "rql_parser.cc"

  
#line 358 "rql.cg"
etype = 
#line 1038 "rql_parser.cc"
E_Type();
  
#line 359 "rql.cg"
v = 
#line 1043 "rql_parser.cc"
Var(
#line 359 "rql.cg"
parent);
#line 1047 "rql_parser.cc"

  {
#line 359 "rql.cg"
parent->add_main_variable( etype, v ); }
#line 1052 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::COMA)) {
    consumeToken(RqlToken::COMA);
    
#line 360 "rql.cg"
etype = 
#line 1059 "rql_parser.cc"
E_Type();
    
#line 361 "rql.cg"
v = 
#line 1064 "rql_parser.cc"
Var(
#line 361 "rql.cg"
parent);
#line 1068 "rql_parser.cc"

    {
#line 361 "rql.cg"

	    parent->add_main_variable( etype, v );
	}
#line 1075 "rql_parser.cc"

  }
  {
#line 364 "rql.cg"
 return parent; }
#line 1081 "rql_parser.cc"

}



#line 367 "rql.cg"
RQLNode* cppcc::
#line 1089 "rql_parser.cc"
RqlParser::Rels_Decl (
#line 367 "rql.cg"
 StmtNode* parent )
#line 1093 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 368 "rql.cg"
 RelationNode *rel=0; ;
#line 1099 "rql_parser.cc"

  
#line 369 "rql.cg"
rel = 
#line 1104 "rql_parser.cc"
Simple_Rel(
#line 369 "rql.cg"
 parent );
#line 1108 "rql_parser.cc"

  {
#line 369 "rql.cg"
 parent->add_main_relation( rel ); }
#line 1113 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::COMA)) {
    consumeToken(RqlToken::COMA);
    
#line 370 "rql.cg"
rel = 
#line 1120 "rql_parser.cc"
Simple_Rel(
#line 370 "rql.cg"
 parent );
#line 1124 "rql_parser.cc"

    {
#line 370 "rql.cg"
 parent->add_main_relation( rel ); }
#line 1129 "rql_parser.cc"

  }
  {
#line 371 "rql.cg"
 return parent; }
#line 1135 "rql_parser.cc"

}



#line 374 "rql.cg"
RelationNode* cppcc::
#line 1143 "rql_parser.cc"
RqlParser::Simple_Rel (
#line 374 "rql.cg"
 StmtNode* parent )
#line 1147 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 375 "rql.cg"

	    RelationNode *e=0;
	    VarNode *v=0;
	    ExprNode *expr=0;
	    std::string rtype;
	;
#line 1158 "rql_parser.cc"

  
#line 381 "rql.cg"
v = 
#line 1163 "rql_parser.cc"
Var(
#line 381 "rql.cg"
parent);
#line 1167 "rql_parser.cc"

  
#line 381 "rql.cg"
rtype = 
#line 1172 "rql_parser.cc"
R_Type();
  
#line 382 "rql.cg"
expr = 
#line 1177 "rql_parser.cc"
Added_Expr(
#line 382 "rql.cg"
parent);
#line 1181 "rql_parser.cc"

  {
#line 383 "rql.cg"

		e = new RelationNode(rtype);
		e->append( v );
		e->append( expr );
		return e;
	    }
#line 1191 "rql_parser.cc"

}



#line 391 "rql.cg"
ExprNode* cppcc::
#line 1199 "rql_parser.cc"
RqlParser::Expr (
#line 391 "rql.cg"
 StmtNode* parent )
#line 1203 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 392 "rql.cg"

	    ExprNode *expr=0, *added_expr=0;
	    std::string cmp_op;
	;
#line 1212 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::CMP_OP)) {
    consumeToken(RqlToken::CMP_OP);
    {
#line 396 "rql.cg"
 cmp_op = token->image(); }
#line 1219 "rql_parser.cc"

    
#line 397 "rql.cg"
added_expr = 
#line 1224 "rql_parser.cc"
Added_Expr(
#line 397 "rql.cg"
 parent );
#line 1228 "rql_parser.cc"

    {
#line 397 "rql.cg"
 expr = new ComparisonNode( cmp_op, added_expr ); }
#line 1233 "rql_parser.cc"

  } else { 
    
#line 398 "rql.cg"
added_expr = 
#line 1239 "rql_parser.cc"
Added_Expr(
#line 398 "rql.cg"
 parent );
#line 1243 "rql_parser.cc"

    {
#line 398 "rql.cg"
 expr = new ComparisonNode( "=", added_expr ); }
#line 1248 "rql_parser.cc"

  }
  {
#line 399 "rql.cg"
 return expr; }
#line 1254 "rql_parser.cc"

}



#line 402 "rql.cg"
ExprNode* cppcc::
#line 1262 "rql_parser.cc"
RqlParser::Added_Expr (
#line 402 "rql.cg"
 StmtNode* parent )
#line 1266 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 403 "rql.cg"

	    ExprNode *lhs=0, *rhs=0;
	    std::string add_op;
	;
#line 1275 "rql_parser.cc"

  
#line 407 "rql.cg"
lhs = 
#line 1280 "rql_parser.cc"
Muled_Expr(
#line 407 "rql.cg"
 parent );
#line 1284 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::ADD_OP)) {
    consumeToken(RqlToken::ADD_OP);
    {
#line 408 "rql.cg"
 add_op = token->image(); }
#line 1291 "rql_parser.cc"

    
#line 409 "rql.cg"
rhs = 
#line 1296 "rql_parser.cc"
Muled_Expr(
#line 409 "rql.cg"
 parent );
#line 1300 "rql_parser.cc"

    {
#line 409 "rql.cg"
 lhs = new MathExpression( add_op, lhs, rhs ); }
#line 1305 "rql_parser.cc"

  }
  {
#line 410 "rql.cg"
 return lhs; }
#line 1311 "rql_parser.cc"

}



#line 413 "rql.cg"
ExprNode* cppcc::
#line 1319 "rql_parser.cc"
RqlParser::Muled_Expr (
#line 413 "rql.cg"
 StmtNode* parent )
#line 1323 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 414 "rql.cg"

	    ExprNode *lhs=0, *rhs=0;
	    std::string mul_op;
	;
#line 1332 "rql_parser.cc"

  
#line 418 "rql.cg"
lhs = 
#line 1337 "rql_parser.cc"
Base_Expr(
#line 418 "rql.cg"
 parent );
#line 1341 "rql_parser.cc"

  while ((scanner.la()->id == RqlToken::MUL_OP)) {
    consumeToken(RqlToken::MUL_OP);
    {
#line 419 "rql.cg"
 mul_op = token->image(); }
#line 1348 "rql_parser.cc"

    
#line 420 "rql.cg"
rhs = 
#line 1353 "rql_parser.cc"
Base_Expr(
#line 420 "rql.cg"
 parent );
#line 1357 "rql_parser.cc"

    {
#line 420 "rql.cg"
 lhs = new MathExpression( mul_op, lhs, rhs ); }
#line 1362 "rql_parser.cc"

  }
  {
#line 421 "rql.cg"
 return lhs; }
#line 1368 "rql_parser.cc"

}



#line 425 "rql.cg"
ExprNode* cppcc::
#line 1376 "rql_parser.cc"
RqlParser::Base_Expr (
#line 425 "rql.cg"
 StmtNode* parent )
#line 1380 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 426 "rql.cg"
 ExprNode* expr=0; ;
#line 1386 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::DATE) || (scanner.la()->id == RqlToken::DATETIME) || (scanner.la()->id == RqlToken::RQLNULL) || (scanner.la()->id == RqlToken::BOOLEAN) || (scanner.la()->id == RqlToken::FLOAT) || (scanner.la()->id == RqlToken::INT) || (scanner.la()->id == RqlToken::SUBSTITUTE) || (scanner.la()->id == RqlToken::STRING)) {
    
#line 427 "rql.cg"
expr = 
#line 1392 "rql_parser.cc"
Const();
  } else { 
    if ((scanner.la()->id == RqlToken::SYMBOL)) {
      
#line 428 "rql.cg"
expr = 
#line 1399 "rql_parser.cc"
Var_E_Type_or_Func(
#line 428 "rql.cg"
parent);
#line 1403 "rql_parser.cc"

    } else { 
      consumeToken(RqlToken::LPAREN);
      
#line 429 "rql.cg"
expr = 
#line 1410 "rql_parser.cc"
Added_Expr(
#line 429 "rql.cg"
parent);
#line 1414 "rql_parser.cc"

      consumeToken(RqlToken::RPAREN);
    }
  }
  {
#line 430 "rql.cg"
 assert(expr); return expr; }
#line 1422 "rql_parser.cc"

}



#line 434 "rql.cg"
ExprNode* cppcc::
#line 1430 "rql_parser.cc"
RqlParser::Var_E_Type_or_Func (
#line 434 "rql.cg"
 StmtNode* parent )
#line 1434 "rql_parser.cc"

     throw (ScanException, ParseException)
{
#line 435 "rql.cg"

	    std::string name;
	    FuncNode *func=0;
	    ExprNode *expr=0;
	;
#line 1444 "rql_parser.cc"

  consumeToken(RqlToken::SYMBOL);
  {
#line 440 "rql.cg"
 name =  token->image(); }
#line 1450 "rql_parser.cc"

  if ((scanner.la()->id == RqlToken::LPAREN)) {
    consumeToken(RqlToken::LPAREN);
    {
#line 441 "rql.cg"
 func = new FuncNode(name ); }
#line 1457 "rql_parser.cc"

    
#line 442 "rql.cg"
expr = 
#line 1462 "rql_parser.cc"
Added_Expr(
#line 442 "rql.cg"
parent);
#line 1466 "rql_parser.cc"

    {
#line 442 "rql.cg"
 func->append( expr ); }
#line 1471 "rql_parser.cc"

    while ((scanner.la()->id == RqlToken::COMA)) {
      consumeToken(RqlToken::COMA);
      
#line 443 "rql.cg"
expr = 
#line 1478 "rql_parser.cc"
Added_Expr(
#line 443 "rql.cg"
parent);
#line 1482 "rql_parser.cc"

      {
#line 443 "rql.cg"
 func->append( expr ); }
#line 1487 "rql_parser.cc"

    }
    consumeToken(RqlToken::RPAREN);
    {
#line 444 "rql.cg"
 return func; }
#line 1494 "rql_parser.cc"

  } else { 
     /* lambda */
  }
  {
#line 446 "rql.cg"

		if (is_var(name)) {
		    return parent->get_variable( name );
		}
		expr = parent->get_type( name );
		assert(expr);
#if MYDEBUG
		std::cout << "E_TYPE ";
		expr->display( std::cout, 0 );
		std::cout << std::endl;
#endif
		return expr;
	    }
#line 1514 "rql_parser.cc"

}



#line 461 "rql.cg"
VarNode* cppcc::
#line 1522 "rql_parser.cc"
RqlParser::Var (
#line 461 "rql.cg"
 StmtNode* parent )
#line 1526 "rql_parser.cc"

     throw (ScanException, ParseException)
{
  consumeToken(RqlToken::SYMBOL);
  {
#line 462 "rql.cg"

	    VarNode* v=0;
	    if (!is_var( token->image() )) {
		throw ScanException( token->bPos, "Expected Variable" );
	    }
	    v = parent->get_variable( token->image() );
	    assert(v);
	    return v;
	}
#line 1542 "rql_parser.cc"

}



#line 474 "rql.cg"
ExprNode* cppcc::
#line 1550 "rql_parser.cc"
RqlParser::Const ()
     throw (ScanException, ParseException)
{
  if ((scanner.la()->id == RqlToken::RQLNULL)) {
    consumeToken(RqlToken::RQLNULL);
    {
#line 475 "rql.cg"
 return new Constant( "NULL", token->image() ); }
#line 1559 "rql_parser.cc"

  } else { 
    if ((scanner.la()->id == RqlToken::DATE)) {
      consumeToken(RqlToken::DATE);
      {
#line 476 "rql.cg"
 return new Constant( "Date", token->image() ); }
#line 1567 "rql_parser.cc"

    } else { 
      if ((scanner.la()->id == RqlToken::DATETIME)) {
        consumeToken(RqlToken::DATETIME);
        {
#line 477 "rql.cg"
 return new Constant( "Datetime", token->image() ); }
#line 1575 "rql_parser.cc"

      } else { 
        if ((scanner.la()->id == RqlToken::BOOLEAN)) {
          consumeToken(RqlToken::BOOLEAN);
          {
#line 478 "rql.cg"
 return new Constant( "Boolean", token->image() ); }
#line 1583 "rql_parser.cc"

        } else { 
          if ((scanner.la()->id == RqlToken::FLOAT)) {
            consumeToken(RqlToken::FLOAT);
            {
#line 479 "rql.cg"
 return new Constant( "Float", double(*token) ); }
#line 1591 "rql_parser.cc"

          } else { 
            if ((scanner.la()->id == RqlToken::INT)) {
              consumeToken(RqlToken::INT);
              {
#line 480 "rql.cg"
 return new Constant( "Int", int(*token) ); }
#line 1599 "rql_parser.cc"

            } else { 
              if ((scanner.la()->id == RqlToken::STRING)) {
                consumeToken(RqlToken::STRING);
                {
#line 481 "rql.cg"
 return new Constant( "String", token->image() ); }
#line 1607 "rql_parser.cc"

              } else { 
                consumeToken(RqlToken::SUBSTITUTE);
                {
#line 482 "rql.cg"
 return new Constant( "Substitute", token->image() ); }
#line 1614 "rql_parser.cc"

              }
            }
          }
        }
      }
    }
  }
}


bool cppcc::RqlParser::__la_Goal_ () throw (ScanException)
{
  if ((scanner.la()->id == RqlToken::DELETE)) {
    if (!laConsumeToken(RqlToken::DELETE)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Delete_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!laConsumeToken(RqlToken::SEMICOLON)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == RqlToken::INSERT)) {
      if (!laConsumeToken(RqlToken::INSERT)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!__la_Insert_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!laConsumeToken(RqlToken::SEMICOLON)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == RqlToken::SET)) {
        if (!laConsumeToken(RqlToken::SET)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
        if (!__la_Update_()) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
        if (!laConsumeToken(RqlToken::SEMICOLON)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if (!__la_Select_()) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
        if (!laConsumeToken(RqlToken::SEMICOLON)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Delete_ () throw (ScanException)
{
  if ((
#line 181 "rql.cg"
scanner.is_next_vars_decl())
#line 1673 "rql_parser.cc"
) {
    if (!__la_Vars_Decl_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if ((scanner.la()->id == RqlToken::WHERE)) {
      if (!__la_Restr_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
       /* lambda */
    }
  } else { 
    if (!__la_Rels_Decl_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if ((scanner.la()->id == RqlToken::WHERE)) {
      if (!__la_Restr_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
       /* lambda */
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Insert_ () throw (ScanException)
{
  if (!__la_Vars_Decl_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if ((scanner.la()->id == RqlToken::COLON)) {
    if (!__la_Insert_Rels_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Insert_Rels_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::COLON)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_Rels_Decl_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if ((scanner.la()->id == RqlToken::WHERE)) {
    if (!__la_Restr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Update_ () throw (ScanException)
{
  if (!__la_Rels_Decl_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if ((scanner.la()->id == RqlToken::WHERE)) {
    if (!__la_Restr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Select_ () throw (ScanException)
{
  if ((scanner.la()->id == RqlToken::DISTINCT)) {
    if (!laConsumeToken(RqlToken::DISTINCT)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  if (!__la_Select_Base_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Select_Base_ () throw (ScanException)
{
  if (!__la_E_Type_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_Selected_Terms_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if ((scanner.la()->id == RqlToken::WHERE)) {
    if (!__la_Restr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  if ((scanner.la()->id == RqlToken::GROUPBY)) {
    if (!__la_Group_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  if ((scanner.la()->id == RqlToken::ORDERBY)) {
    if (!__la_Sort_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  if ((scanner.la()->id == RqlToken::LIMIT) || (scanner.la()->id == RqlToken::OFFSET)) {
    if (!__la_Limit_Offset_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Selected_Terms_ () throw (ScanException)
{
  if (!__la_Added_Expr_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::COMA)) {
    if (!laConsumeToken(RqlToken::COMA)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Added_Expr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Group_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::GROUPBY)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_Var_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::COMA)) {
    if (!laConsumeToken(RqlToken::COMA)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Var_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Sort_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::ORDERBY)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_Sort_Term_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::COMA)) {
    if (!laConsumeToken(RqlToken::COMA)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Sort_Term_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Sort_Term_ () throw (ScanException)
{
  if (!__la_Added_Expr_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if ((scanner.la()->id == RqlToken::SORT_ASC) || (scanner.la()->id == RqlToken::SORT_DESC)) {
    if ((scanner.la()->id == RqlToken::SORT_DESC)) {
      if (!laConsumeToken(RqlToken::SORT_DESC)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if (!laConsumeToken(RqlToken::SORT_ASC)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    }
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Limit_Offset_ () throw (ScanException)
{
  if ((scanner.la()->id == RqlToken::LIMIT)) {
    if (!__la_Limit_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  if ((scanner.la()->id == RqlToken::OFFSET)) {
    if (!__la_Offset_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Limit_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::LIMIT)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(RqlToken::INT)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Offset_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::OFFSET)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!laConsumeToken(RqlToken::INT)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Restr_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::WHERE)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_Rels_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Rels_ () throw (ScanException)
{
  if (!__la_Ored_Rels_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::COMA)) {
    if (!laConsumeToken(RqlToken::COMA)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Ored_Rels_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Ored_Rels_ () throw (ScanException)
{
  if (!__la_Anded_Rels_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::OR)) {
    if (!laConsumeToken(RqlToken::OR)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Anded_Rels_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Anded_Rels_ () throw (ScanException)
{
  if (!__la_Rel_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::AND)) {
    if (!laConsumeToken(RqlToken::AND)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Rel_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Rel_ () throw (ScanException)
{
  if ((scanner.la()->id == RqlToken::NOT) || (scanner.la()->id == RqlToken::SYMBOL)) {
    if ((scanner.la()->id == RqlToken::NOT)) {
      if (!laConsumeToken(RqlToken::NOT)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
       /* lambda */
    }
    if (!__la_Base_Rel_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!laConsumeToken(RqlToken::LPAREN)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Rels_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!laConsumeToken(RqlToken::RPAREN)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Base_Rel_ () throw (ScanException)
{
  if (!__la_Var_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_R_Type_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_Expr_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_R_Type_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::SYMBOL)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_E_Type_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::SYMBOL)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Vars_Decl_ () throw (ScanException)
{
  if (!__la_E_Type_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_Var_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::COMA)) {
    if (!laConsumeToken(RqlToken::COMA)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_E_Type_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Var_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Rels_Decl_ () throw (ScanException)
{
  if (!__la_Simple_Rel_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::COMA)) {
    if (!laConsumeToken(RqlToken::COMA)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Simple_Rel_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Simple_Rel_ () throw (ScanException)
{
  if (!__la_Var_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_R_Type_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if (!__la_Added_Expr_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Expr_ () throw (ScanException)
{
  if ((scanner.la()->id == RqlToken::CMP_OP)) {
    if (!laConsumeToken(RqlToken::CMP_OP)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Added_Expr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if (!__la_Added_Expr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Added_Expr_ () throw (ScanException)
{
  if (!__la_Muled_Expr_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::ADD_OP)) {
    if (!laConsumeToken(RqlToken::ADD_OP)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Muled_Expr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Muled_Expr_ () throw (ScanException)
{
  if (!__la_Base_Expr_()) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  while ((scanner.la()->id == RqlToken::MUL_OP)) {
    if (!laConsumeToken(RqlToken::MUL_OP)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Base_Expr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Base_Expr_ () throw (ScanException)
{
  if ((scanner.la()->id == RqlToken::DATE) || (scanner.la()->id == RqlToken::DATETIME) || (scanner.la()->id == RqlToken::RQLNULL) || (scanner.la()->id == RqlToken::BOOLEAN) || (scanner.la()->id == RqlToken::FLOAT) || (scanner.la()->id == RqlToken::INT) || (scanner.la()->id == RqlToken::SUBSTITUTE) || (scanner.la()->id == RqlToken::STRING)) {
    if (!__la_Const_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == RqlToken::SYMBOL)) {
      if (!__la_Var_E_Type_or_Func_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if (!laConsumeToken(RqlToken::LPAREN)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!__la_Added_Expr_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!laConsumeToken(RqlToken::RPAREN)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Var_E_Type_or_Func_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::SYMBOL)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  if ((scanner.la()->id == RqlToken::LPAREN)) {
    if (!laConsumeToken(RqlToken::LPAREN)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    if (!__la_Added_Expr_()) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
    while ((scanner.la()->id == RqlToken::COMA)) {
      if (!laConsumeToken(RqlToken::COMA)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
      if (!__la_Added_Expr_()) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    }
    if (!laConsumeToken(RqlToken::RPAREN)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
     /* lambda */
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Var_ () throw (ScanException)
{
  if (!laConsumeToken(RqlToken::SYMBOL)) goto __lookahead_fail_;
  if (_la == 0) goto __lookahead_succeed_;
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}


bool cppcc::RqlParser::__la_Const_ () throw (ScanException)
{
  if ((scanner.la()->id == RqlToken::RQLNULL)) {
    if (!laConsumeToken(RqlToken::RQLNULL)) goto __lookahead_fail_;
    if (_la == 0) goto __lookahead_succeed_;
  } else { 
    if ((scanner.la()->id == RqlToken::DATE)) {
      if (!laConsumeToken(RqlToken::DATE)) goto __lookahead_fail_;
      if (_la == 0) goto __lookahead_succeed_;
    } else { 
      if ((scanner.la()->id == RqlToken::DATETIME)) {
        if (!laConsumeToken(RqlToken::DATETIME)) goto __lookahead_fail_;
        if (_la == 0) goto __lookahead_succeed_;
      } else { 
        if ((scanner.la()->id == RqlToken::BOOLEAN)) {
          if (!laConsumeToken(RqlToken::BOOLEAN)) goto __lookahead_fail_;
          if (_la == 0) goto __lookahead_succeed_;
        } else { 
          if ((scanner.la()->id == RqlToken::FLOAT)) {
            if (!laConsumeToken(RqlToken::FLOAT)) goto __lookahead_fail_;
            if (_la == 0) goto __lookahead_succeed_;
          } else { 
            if ((scanner.la()->id == RqlToken::INT)) {
              if (!laConsumeToken(RqlToken::INT)) goto __lookahead_fail_;
              if (_la == 0) goto __lookahead_succeed_;
            } else { 
              if ((scanner.la()->id == RqlToken::STRING)) {
                if (!laConsumeToken(RqlToken::STRING)) goto __lookahead_fail_;
                if (_la == 0) goto __lookahead_succeed_;
              } else { 
                if (!laConsumeToken(RqlToken::SUBSTITUTE)) goto __lookahead_fail_;
                if (_la == 0) goto __lookahead_succeed_;
              }
            }
          }
        }
      }
    }
  }
  
  __lookahead_succeed_:
    return true;
    
  __lookahead_fail_:
    return false;
}





/* End of file. */
