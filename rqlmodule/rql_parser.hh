/******************************************************************
 * File: rql_parser.hh
 *
 * This file was automatically generated by CppCC Version 0.0.8
 * DO NOT EDIT MANUALLY
 ******************************************************************/


#ifndef __RQL_PARSER_HH__
#define __RQL_PARSER_HH__

#include <iostream>
#include <string>
#include <exception>

#include "rql_token.hh"
#include "rql_scanner.hh"
namespace cppcc
{

class ParseException : public std::exception
{
  public:
    
    ParseException (const std::string &message_ = "Parse exception") :
      message(message_)
    {}
    
    ParseException (const Position &pos_,
                   const std::string &message_ = "Parse exception") :
      message(message_), pos(pos_)
    {}
    
    ~ParseException () throw ()
    {}
    
    virtual operator std::string () const
    {
      return std::string(pos) + ": " + message;
    }
    
    virtual const char* what () const throw ()
    {
      return message.c_str();
    }
    
    virtual Position& where () throw ()
    {
      return pos;
    }
    
  private:
  
    std::string message;
    Position pos;
}; // end class ParseException


class RqlParser_base
{
  protected:
    bool onParseError (ParseException &pex) { return false; }
};


class RqlParser : public RqlParser_base
{
  public: // methods
    
    RqlParser (std::istream *in_ = NULL) throw (ScanException, ParseException) :
       scanner(in_), _la(0)
    {}
    
    // productions entry points:
    
    
#line 155 "rql.cg"
StmtNode*
#line 80 "rql_parser.hh"

     Goal (
#line 155 "rql.cg"
 TypeDict* types )
#line 85 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 180 "rql.cg"
RQLNode*
#line 91 "rql_parser.hh"

     Delete (
#line 180 "rql.cg"
 DeleteStmt* parent )
#line 96 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 189 "rql.cg"
RQLNode*
#line 102 "rql_parser.hh"

     Insert (
#line 189 "rql.cg"
 InsertStmt* parent )
#line 107 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 194 "rql.cg"
RQLNode*
#line 113 "rql_parser.hh"

     Insert_Rels (
#line 194 "rql.cg"
 InsertStmt* parent )
#line 118 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 201 "rql.cg"
RQLNode*
#line 124 "rql_parser.hh"

     Update (
#line 201 "rql.cg"
 UpdateStmt* parent )
#line 129 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 207 "rql.cg"
RQLNode*
#line 135 "rql_parser.hh"

     Select (
#line 207 "rql.cg"
 SelectStmt* parent )
#line 140 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 212 "rql.cg"
RQLNode*
#line 146 "rql_parser.hh"

     Select_Base (
#line 212 "rql.cg"
 SelectStmt* parent )
#line 151 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 222 "rql.cg"
RQLNode*
#line 157 "rql_parser.hh"

     Selected_Terms (
#line 222 "rql.cg"
 SelectStmt* parent )
#line 162 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 231 "rql.cg"
RQLNode*
#line 168 "rql_parser.hh"

     Group (
#line 231 "rql.cg"
 StmtNode* parent )
#line 173 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 241 "rql.cg"
RQLNode*
#line 179 "rql_parser.hh"

     Sort (
#line 241 "rql.cg"
 StmtNode* parent )
#line 184 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 251 "rql.cg"
SortTermNode*
#line 190 "rql_parser.hh"

     Sort_Term (
#line 251 "rql.cg"
 StmtNode* parent )
#line 195 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 261 "rql.cg"
RQLNode*
#line 201 "rql_parser.hh"

     Limit_Offset (
#line 261 "rql.cg"
 SelectStmt* parent )
#line 206 "rql_parser.hh"

       throw (ScanException, ParseException);
    void
     Limit (
#line 265 "rql.cg"
 SelectStmt* parent )
#line 213 "rql_parser.hh"

       throw (ScanException, ParseException);
    void
     Offset (
#line 268 "rql.cg"
 SelectStmt* parent )
#line 220 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 274 "rql.cg"
RQLNode*
#line 226 "rql_parser.hh"

     Restr (
#line 274 "rql.cg"
 StmtNode* parent )
#line 231 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 279 "rql.cg"
RelNode*
#line 237 "rql_parser.hh"

     Rels (
#line 279 "rql.cg"
 StmtNode* parent )
#line 242 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 287 "rql.cg"
RelNode*
#line 248 "rql_parser.hh"

     Ored_Rels (
#line 287 "rql.cg"
 StmtNode* parent )
#line 253 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 295 "rql.cg"
RelNode*
#line 259 "rql_parser.hh"

     Anded_Rels (
#line 295 "rql.cg"
 StmtNode* parent )
#line 264 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 303 "rql.cg"
RelNode*
#line 270 "rql_parser.hh"

     Rel (
#line 303 "rql.cg"
 StmtNode* parent )
#line 275 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 314 "rql.cg"
RelationNode*
#line 281 "rql_parser.hh"

     Base_Rel (
#line 314 "rql.cg"
 StmtNode* parent )
#line 286 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 334 "rql.cg"
std::string
#line 292 "rql_parser.hh"

     R_Type ()
       throw (ScanException, ParseException);
    
#line 342 "rql.cg"
std::string
#line 299 "rql_parser.hh"

     E_Type ()
       throw (ScanException, ParseException);
    
#line 353 "rql.cg"
RQLNode*
#line 306 "rql_parser.hh"

     Vars_Decl (
#line 353 "rql.cg"
 StmtNode* parent )
#line 311 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 367 "rql.cg"
RQLNode*
#line 317 "rql_parser.hh"

     Rels_Decl (
#line 367 "rql.cg"
 StmtNode* parent )
#line 322 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 374 "rql.cg"
RelationNode*
#line 328 "rql_parser.hh"

     Simple_Rel (
#line 374 "rql.cg"
 StmtNode* parent )
#line 333 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 391 "rql.cg"
ExprNode*
#line 339 "rql_parser.hh"

     Expr (
#line 391 "rql.cg"
 StmtNode* parent )
#line 344 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 402 "rql.cg"
ExprNode*
#line 350 "rql_parser.hh"

     Added_Expr (
#line 402 "rql.cg"
 StmtNode* parent )
#line 355 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 413 "rql.cg"
ExprNode*
#line 361 "rql_parser.hh"

     Muled_Expr (
#line 413 "rql.cg"
 StmtNode* parent )
#line 366 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 425 "rql.cg"
ExprNode*
#line 372 "rql_parser.hh"

     Base_Expr (
#line 425 "rql.cg"
 StmtNode* parent )
#line 377 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 434 "rql.cg"
ExprNode*
#line 383 "rql_parser.hh"

     Var_E_Type_or_Func (
#line 434 "rql.cg"
 StmtNode* parent )
#line 388 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 461 "rql.cg"
VarNode*
#line 394 "rql_parser.hh"

     Var (
#line 461 "rql.cg"
 StmtNode* parent )
#line 399 "rql_parser.hh"

       throw (ScanException, ParseException);
    
#line 474 "rql.cg"
ExprNode*
#line 405 "rql_parser.hh"

     Const ()
       throw (ScanException, ParseException);
    
    // productions LA methods:
    
    bool __la_Goal_ () throw (ScanException);
    bool __la_Delete_ () throw (ScanException);
    bool __la_Insert_ () throw (ScanException);
    bool __la_Insert_Rels_ () throw (ScanException);
    bool __la_Update_ () throw (ScanException);
    bool __la_Select_ () throw (ScanException);
    bool __la_Select_Base_ () throw (ScanException);
    bool __la_Selected_Terms_ () throw (ScanException);
    bool __la_Group_ () throw (ScanException);
    bool __la_Sort_ () throw (ScanException);
    bool __la_Sort_Term_ () throw (ScanException);
    bool __la_Limit_Offset_ () throw (ScanException);
    bool __la_Limit_ () throw (ScanException);
    bool __la_Offset_ () throw (ScanException);
    bool __la_Restr_ () throw (ScanException);
    bool __la_Rels_ () throw (ScanException);
    bool __la_Ored_Rels_ () throw (ScanException);
    bool __la_Anded_Rels_ () throw (ScanException);
    bool __la_Rel_ () throw (ScanException);
    bool __la_Base_Rel_ () throw (ScanException);
    bool __la_R_Type_ () throw (ScanException);
    bool __la_E_Type_ () throw (ScanException);
    bool __la_Vars_Decl_ () throw (ScanException);
    bool __la_Rels_Decl_ () throw (ScanException);
    bool __la_Simple_Rel_ () throw (ScanException);
    bool __la_Expr_ () throw (ScanException);
    bool __la_Added_Expr_ () throw (ScanException);
    bool __la_Muled_Expr_ () throw (ScanException);
    bool __la_Base_Expr_ () throw (ScanException);
    bool __la_Var_E_Type_or_Func_ () throw (ScanException);
    bool __la_Var_ () throw (ScanException);
    bool __la_Const_ () throw (ScanException);
    
    // lookahead entry points:
    
    // LA entry points for Goal
    
    // LA entry points for Delete
    
    // LA entry points for Insert
    
    // LA entry points for Insert_Rels
    
    // LA entry points for Update
    
    // LA entry points for Select
    
    // LA entry points for Select_Base
    
    // LA entry points for Selected_Terms
    
    // LA entry points for Group
    
    // LA entry points for Sort
    
    // LA entry points for Sort_Term
    
    // LA entry points for Limit_Offset
    
    // LA entry points for Limit
    
    // LA entry points for Offset
    
    // LA entry points for Restr
    
    // LA entry points for Rels
    
    // LA entry points for Ored_Rels
    
    // LA entry points for Anded_Rels
    
    // LA entry points for Rel
    
    // LA entry points for Base_Rel
    
    // LA entry points for R_Type
    
    // LA entry points for E_Type
    
    // LA entry points for Vars_Decl
    
    // LA entry points for Rels_Decl
    
    // LA entry points for Simple_Rel
    
    // LA entry points for Expr
    
    // LA entry points for Added_Expr
    
    // LA entry points for Muled_Expr
    
    // LA entry points for Base_Expr
    
    // LA entry points for Var_E_Type_or_Func
    
    // LA entry points for Var
    
    // LA entry points for Const
    
    
    
  private: // methods
    
    void consumeToken (int tId)  throw (ScanException, ParseException)
    {
      if ((token = scanner.la())->id != tId)
      {
        ParseException pex(scanner.la()->bPos, "Parse error.");
        if (!onParseError(pex)) throw pex;
      }
      scanner.unchecked_consume();
    }
    
    bool laConsumeToken (int tId)  throw (ScanException, ParseException)
    {
      if (scanner.la()->id != tId) return false;
      scanner.unchecked_consume();
      return true;
    }
    
  public: // data
    
    RqlScanner scanner;
    int _la;
    RqlToken *token;
    
}; //end class RqlParser


} //end namespace cppcc


#endif // ifndef __RQL_PARSER_HH__


/* End of file. */
