/******************************************************************
 * File: rql_token.hh
 *
 * This file was automatically generated by CppCC Version 0.0.8
 * DO NOT EDIT MANUALLY
 ******************************************************************/


#ifndef __RQL_TOKEN_HH__
#define __RQL_TOKEN_HH__

#include <string>
#include <sstream>

#line 12 "rql.cg"

#include "nodes.hh"
#include <string>
#include <assert.h>
#include <iostream>
#include <cctype>
#define MYDEBUG 0



#line 27 "rql_token.hh"

namespace cppcc
{

class Position
{
  public:
    Position () : ln(0), col(0) {}
    Position (int ln_, int col_) : ln(ln_), col(col_) {}
    Position (const Position &o) : ln(o.ln), col(o.col) {}
    
    operator std::string () const
    {
      std::ostringstream oss;
      oss << ln << ":" << col;
      return oss.str();
    }
    
    int ln, col;
};

class RqlToken
{
  friend class RqlScanner;
  public:
    
    RqlToken () : _img_valid(true) {}
    RqlToken (int id_, const std::string &_str_img_, 
              const Position &bPos_, const Position &ePos_) :
      bPos(bPos_), ePos(ePos_), id(id_), _img_valid(true), _str_img(_str_img_)
    {}
    RqlToken (int id_, const Position &bPos_, const Position &ePos_) :
      bPos(bPos_), ePos(ePos_), id(id_), _img_valid(true)
    {}
    RqlToken (int id_) : 
       id(id_), _img_valid(true)
    {}
    RqlToken (const std::string &_str_img_) : 
      _img_valid(true), _str_img(_str_img_)
    { length = _str_img.length(); }
    RqlToken (int id_, const Position &bPos_) :
      bPos(bPos_), ePos(bPos_), id(id_), _img_valid(true)
    {}
  
  public:
    Position bPos, ePos;
    int id;
    int length;
    std::string& image()
    {
      _cacheImg();
      return _str_img;
    }
  
  private:
    const char *_img_start; //points into the scanner's buffer
    bool _img_valid; //true if the string image is in sync with the buffer
    std::string _str_img; //caches the image as a string
    
    void _set (int id_, const Position &bPos_, const Position &ePos_,
               const char *_img_start_, int length_)
    {
      id = id_; bPos = bPos_; ePos = ePos_;
      _img_start = _img_start_; length = length_;
      _img_valid = false;
    }
    
    void _set (const char *_img_start_, int length_)
    {
      _img_start = _img_start_; length = length_;
      _img_valid = false;
    }
    void _cacheImg()
    {
      if (!_img_valid) {
        _str_img.assign(_img_start, length);
        _img_valid = true;
      }
    }
    
  private: // user code
  
#line 24 "rql.cg"

 public:
    operator int() { return atoi(image().c_str()); }
    operator double() { return atof(image().c_str()); }
    void toupper() {
	std::string& s = image();
	std::transform(s.begin(), s.end(), s.begin(), (int(*)(int)) std::toupper);
    }
    void tolower() {
	std::string& s = image();
	std::transform(s.begin(), s.end(), s.begin(), (int(*)(int)) std::tolower);
    }

#line 124 "rql_token.hh"

  
   /* Token id constants: */
  public:
  
    static const int eof;
    static const int ws;
    static const int LONG_COMMENT1;
    static const int LONG_COMMENT2;
    static const int LONG_COMMENT3;
    static const int LONG_COMMENT4;
    static const int LONG_COMMENT5;
    static const int LONG_COMMENT;
    static const int DELETE;
    static const int SET;
    static const int INSERT;
    static const int DISTINCT;
    static const int WHERE;
    static const int OR;
    static const int AND;
    static const int NOT;
    static const int GROUPBY;
    static const int ORDERBY;
    static const int SORT_ASC;
    static const int SORT_DESC;
    static const int LIMIT;
    static const int OFFSET;
    static const int DATE;
    static const int DATETIME;
    static const int RQLNULL;
    static const int SEMICOLON;
    static const int COLON;
    static const int COMA;
    static const int LPAREN;
    static const int RPAREN;
    static const int CMP_OP;
    static const int BOOLEAN;
    static const int SYMBOL;
    static const int FLOAT;
    static const int INT;
    static const int SUBSTITUTE;
    static const int STRING;
    static const int ADD_OP;
    static const int MUL_OP;
    
}; // end of RqlToken class


} // end namespace cppcc
#endif // ifndef __RQL_TOKEN_HH__


/* End of file. */
